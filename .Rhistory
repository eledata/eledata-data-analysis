"green", "blue"))
plot + aes(colour = vore) +
scale_colour_manual(values = c("red", "orange", "yellow",
"green", "blue"))
colours <- c(carni = "red", "NA" = "orange", insecti = "yellow",herbi = "green", omni = "blue")
plot + aes(colour = vore) + scale_colour_manual(values = colours)
plot + aes(shape = vore) +
scale_shape_manual(values = c(1, 2, 6, 0, 23))
huron <- data.frame(year = 1875:1972, level = LakeHuron)
huron
ggplot(huron, aes(year)) + geom_line(aes(y = level - 5), colour = "blue") + geom_line(aes(y = level + 5), colour = "red")
ggplot(huron, aes(year)) + geom_line(aes(y = level - 5), colour = "blue") + geom_line(aes(y = level + 5), colour = "red") + scale_colour_manual("Direction", c("below" = "blue", "above" = "red"))
huron <- data.frame(year = 1875:1972, level = LakeHuron)
huron
ggplot(huron, aes(year)) +
geom_line(aes(y = level - 5), colour = "blue") +
geom_line(aes(y = level + 5), colour = "red") +
scale_colour_manual("Direction", c("below" = "blue", "above" = "red"))
huron <- data.frame(year = 1875:1972, level = LakeHuron)
huron
ggplot(huron, aes(year)) +
geom_line(aes(y = level - 5), colour = "blue") +
geom_line(aes(y = level + 5), colour = "red") +
scale_colour_manual("Direction", values = c("below" = "blue", "above" = "red"))
mpg2 <- subset(mpg, cyl != 5&drv %in% c("4","f"))
mpg2
head(mpgs)
head(mpg2)
head(mpg)
5&mpg2$drv %in% c("4","f")
5&mpg$drv %in% c("4","f")
mpg$drv %in% c("4","f")
mpg$drv
5&mpg$drv
5&mpg$drv %in% c("4","f")
mpg$drv %in% c("4","f")
head(mpg2)
qplot(cty, hwy, data = mpg2)
# 一行多列
qplot(cty, hwy, data = mpg2) + facet_grid(.~cyl)
# 一列多行
qplot(cty, hwy, data = mpg2) + facet_grid(cyl~.)
# 多行多列
qplot(cty, hwy, data = mpg2) + facet_grid(drv~cyl)
# 电影 10 年评分分布
movies$decade <- round_any(movies$year, 10, floor)
qplot(rating, ..density.., data=subset(movies, decade > 1890),
geom="histogram", binwidth = 0.5) +
facet_wrap(~ decade, ncol = 6)
library(maps)
library(ggplot2)
USA.POP <- ggplot(us.cities, aes(x = long, y = lat))
+ xlim(-130, -65)
+ borders("state", size=0.5)
+ geom_point(aes(size = log(pop), color = factor(capital), alpha = 1/50))
+ scale_size(range=c(0, 7), name = "log(City population)")
+ scale_color_manual(values = c("black", "red"), labels = c("state capital", "city"))
+ guides(color = guide_legend(title=NULL)) + scale_alpha(guide = FALSE)
+ labs(x = "longtitude", y = "latitude", title = "City Population in the United States")
+ theme(plot.title = element_text(size=20))
USA.POP
#输出图像 并用cairo包进行抗锯齿处理
ggsave(USA.POP, file = "USA_POP.png", type = "cairo", width = 10, height = 6.75)
library(format)
library(formatter)
library(formattable)
percent(rnorm(10, 0, 0.1))
library(maps)
library(ggplot2)
USA.POP <- ggplot(us.cities, aes(x = long, y = lat))
+ xlim(-130, -65)
+ borders("state", size=0.5)
+ geom_point(aes(size = log(pop), color = factor(capital), alpha = 1/50))
+ scale_size(range=c(0, 7), name = "log(City population)")
+ scale_color_manual(values = c("black", "red"), labels = c("state capital", "city"))
+ guides(color = guide_legend(title=NULL)) + scale_alpha(guide = FALSE)
+ labs(x = "longtitude", y = "latitude", title = "City Population in the United States")
+ theme(plot.title = element_text(size=20))
USA.POP
#输出图像 并用cairo包进行抗锯齿处理
ggsave(USA.POP, file = "USA_POP.png", type = "cairo", width = 10, height = 6.75)
library(maps)
library(ggplot2)
USA.POP <- ggplot(us.cities, aes(x = long, y = lat))
+ xlim(-130, -65)
+ borders("state", size=0.5)
+ geom_point(aes(size = log(pop), color = factor(capital), alpha = 1/50))
+ scale_size(range=c(0, 7), name = "log(City population)")
+ scale_color_manual(values = c("black", "red"), labels = c("state capital", "city"))
+ guides(color = guide_legend(title=NULL)) + scale_alpha(guide = FALSE)
+ labs(x = "longtitude", y = "latitude", title = "City Population in the United States")
+ theme(plot.title = element_text(size=20))
USA.POP
USA.POP <- ggplot(us.cities, aes(x = long, y = lat)) + xlim(-130, -65)
library(maps)
library(ggplot2)
USA.POP <- ggplot(us.cities, aes(x = long, y = lat)) +
xlim(-130, -65)
USA.POP
library(maps)
library(ggplot2)
USA.POP <- ggplot(us.cities, aes(x = long, y = lat)) +
xlim(-130, -65) +
borders("state", size=0.5) +
geom_point(aes(size = log(pop), color = factor(capital), alpha = 1/50)) +
scale_size(range=c(0, 7), name = "log(City population)") +
scale_color_manual(values = c("black", "red"), labels = c("state capital", "city")) +
guides(color = guide_legend(title=NULL)) + scale_alpha(guide = FALSE) +
labs(x = "longtitude", y = "latitude", title = "City Population in the United States") +
theme(plot.title = element_text(size=20))
USA.POP
library(maps)
library(ggplot2)
USA.POP <- ggplot(us.cities, aes(x = long, y = lat))
USA.POP
library(maps)
library(ggplot2)
USA.POP <- ggplot(us.cities, aes(x = long, y = lat)) +
xlim(-130, -65) +
borders("state", size=0.5)
USA.POP
if (require("maps")) {
ia <- map_data("county", "iowa")
mid_range <- function(x) mean(range(x))
seats <- plyr::ddply(ia, "subregion", plyr::colwise(mid_range, c("lat", "long")))
ggplot(ia, aes(long, lat)) +
geom_polygon(aes(group = group), fill = NA, colour = "grey60") +
geom_text(aes(label = subregion), data = seats, size = 2, angle = 45)
data(us.cities)
capitals <- subset(us.cities, capital == 2)
ggplot(capitals, aes(long, lat)) +
borders("state") +
geom_point(aes(size = pop)) +
scale_size_area() +
coord_quickmap()
# Same map, with some world context
ggplot(capitals, aes(long, lat)) +
borders("world", xlim = c(-130, -60), ylim = c(20, 50)) +
geom_point(aes(size = pop)) +
scale_size_area() +
coord_quickmap()
}
ggplot(capitals, aes(long, lat)) +
borders("world", xlim = c(-130, -60), ylim = c(20, 50)) +
geom_point(aes(size = pop)) +
scale_size_area() +
coord_quickmap()
ggplot(capitals, aes(long, lat)) +
borders("state") +
geom_point(aes(size = pop)) +
scale_size_area() +
coord_quickmap()
library(maps)
library(ggplot2)
USA.POP <- ggplot(us.cities, aes(x = long, y = lat)) +
xlim(-130, -65) +
borders("state", size=0.5) + # 画出美国州地图
geom_point(aes(size = log(pop), color = factor(capital), alpha = 1/50))
USA.POP
library(maps)
library(ggplot2)
USA.POP <- ggplot(us.cities, aes(x = long, y = lat)) +
xlim(-130, -65) +
borders("state", size=0.5) + # 画出美国州地图
geom_point(aes(size = log(pop), color = factor(capital), alpha = 1/50)) + # 画出人口对数数据，用点来表示
scale_size(range=c(0, 7), name = "log(City population)") +
USA.POP
library(maps)
library(ggplot2)
USA.POP <- ggplot(us.cities, aes(x = long, y = lat)) +
xlim(-130, -65) +
borders("state", size=0.5) + # 画出美国州地图
geom_point(aes(size = log(pop), color = factor(capital), alpha = 1/50)) + # 画出人口对数数据，用点来表示
scale_size(range=c(0, 7), name = "log(City population)") +
scale_color_manual(values = c("black", "red"), labels = c("state capital", "city"))
USA.POP
library(maps)
library(ggplot2)
USA.POP <- ggplot(us.cities, aes(x = long, y = lat)) +
xlim(-130, -65) +
borders("state", size=0.5) + # 画出美国州地图
geom_point(aes(size = log(pop), color = factor(capital), alpha = 1/50)) + # 画出人口对数数据，用点来表示
scale_size(range=c(0, 7), name = "log(City population)") +
scale_color_manual(values = c("black", "red"), labels = c("state capital", "city"))
USA.POP
library(maps)
library(ggplot2)
USA.POP <- ggplot(us.cities, aes(x = long, y = lat)) +
xlim(-130, -65) +
borders("state", size=0.5) + # 画出美国州地图
geom_point(aes(size = log(pop), color = factor(capital), alpha = 1/50)) + # 画出人口对数数据，用点来表示
scale_size(range=c(0, 7), name = "log(City population)") +
scale_color_manual(values = c("black", "red"), labels = c("state capital", "city")) +
guides(color = guide_legend(title=NULL))
USA.POP
movies$decade <- round_any(movies$year, 10, floor)
qplot(rating, ..density.., data=subset(movies, decade > 1890),
geom="histogram", binwidth = 0.5) +
facet_wrap(~ decade, ncol = 6)
data(movies)
library("ggplot2")
data(movies)
movies$decade <- round_any(movies$year, 10, floor)
qplot(rating, ..density.., data=subset(movies, decade > 1890),
geom="histogram", binwidth = 0.5) +
facet_wrap(~ decade, ncol = 6)
qplot <- function(x, y = NULL, ..., data, facets = NULL, margins = FALSE,
geom = "auto", xlim = c(NA, NA),
ylim = c(NA, NA), log = "", main = NULL,
xlab = deparse(substitute(x)), ylab = deparse(substitute(y)),
asp = NA, stat = NULL, position = NULL) {
if (!missing(stat)) warning("`stat` is deprecated", call. = FALSE)
if (!missing(position)) warning("`position` is deprecated", call. = FALSE)
if (!is.character(geom)) stop("`geom` must be a character vector", call. = FALSE)
argnames <- names(as.list(match.call(expand.dots = FALSE)[-1]))
arguments <- as.list(match.call()[-1])
env <- parent.frame()
aesthetics <- compact(arguments[.all_aesthetics])
aesthetics <- aesthetics[!is.constant(aesthetics)]
aes_names <- names(aesthetics)
aesthetics <- rename_aes(aesthetics)
class(aesthetics) <- "uneval"
if (missing(data)) {
# If data not explicitly specified, will be pulled from workspace
data <- data.frame()
# Faceting variables must be in a data frame, so pull those out
facetvars <- all.vars(facets)
facetvars <- facetvars[facetvars != "."]
names(facetvars) <- facetvars
facetsdf <- as.data.frame(mget(facetvars, envir = env))
if (nrow(facetsdf)) data <- facetsdf
}
# Work out plot data, and modify aesthetics, if necessary
if ("auto" %in% geom) {
if ("sample" %in% aes_names) {
geom[geom == "auto"] <- "qq"
} else if (missing(y)) {
x <- eval(aesthetics$x, data, env)
if (is.discrete(x)) {
geom[geom == "auto"] <- "bar"
} else {
geom[geom == "auto"] <- "histogram"
}
if (missing(ylab)) ylab <- "count"
} else {
if (missing(x)) {
aesthetics$x <- bquote(seq_along(.(y)), aesthetics)
}
geom[geom == "auto"] <- "point"
}
}
p <- ggplot(data, aesthetics, environment = env)
if (is.null(facets)) {
p <- p + facet_null()
} else if (is.formula(facets) && length(facets) == 2) {
p <- p + facet_wrap(facets)
} else {
p <- p + facet_grid(facets = deparse(facets), margins = margins)
}
if (!is.null(main)) p <- p + ggtitle(main)
# Add geoms/statistics
for (g in geom) {
# Arguments are unevaluated because some are aesthetics. Need to evaluate
# params - can't do in correct env because that's lost (no lazyeval)
# so do the best we can by evaluating in parent frame.
params <- arguments[setdiff(names(arguments), c(aes_names, argnames))]
params <- lapply(params, eval, parent.frame())
p <- p + do.call(paste0("geom_", g), params)
}
logv <- function(var) var %in% strsplit(log, "")[[1]]
if (logv("x")) p <- p + scale_x_log10()
if (logv("y")) p <- p + scale_y_log10()
if (!is.na(asp)) p <- p + theme(aspect.ratio = asp)
if (!missing(xlab)) p <- p + xlab(xlab)
if (!missing(ylab)) p <- p + ylab(ylab)
if (!missing(xlim)) p <- p + xlim(xlim)
if (!missing(ylim)) p <- p + ylim(ylim)
p
}
qplot1 <- function(x, y = NULL, ..., data, facets = NULL, margins = FALSE,
geom = "auto", xlim = c(NA, NA),
ylim = c(NA, NA), log = "", main = NULL,
xlab = deparse(substitute(x)), ylab = deparse(substitute(y)),
asp = NA, stat = NULL, position = NULL) {
if (!missing(stat)) warning("`stat` is deprecated", call. = FALSE)
if (!missing(position)) warning("`position` is deprecated", call. = FALSE)
if (!is.character(geom)) stop("`geom` must be a character vector", call. = FALSE)
argnames <- names(as.list(match.call(expand.dots = FALSE)[-1]))
arguments <- as.list(match.call()[-1])
env <- parent.frame()
aesthetics <- compact(arguments[.all_aesthetics])
aesthetics <- aesthetics[!is.constant(aesthetics)]
aes_names <- names(aesthetics)
aesthetics <- rename_aes(aesthetics)
class(aesthetics) <- "uneval"
if (missing(data)) {
# If data not explicitly specified, will be pulled from workspace
data <- data.frame()
# Faceting variables must be in a data frame, so pull those out
facetvars <- all.vars(facets)
facetvars <- facetvars[facetvars != "."]
names(facetvars) <- facetvars
facetsdf <- as.data.frame(mget(facetvars, envir = env))
if (nrow(facetsdf)) data <- facetsdf
}
# Work out plot data, and modify aesthetics, if necessary
if ("auto" %in% geom) {
if ("sample" %in% aes_names) {
geom[geom == "auto"] <- "qq"
} else if (missing(y)) {
x <- eval(aesthetics$x, data, env)
if (is.discrete(x)) {
geom[geom == "auto"] <- "bar"
} else {
geom[geom == "auto"] <- "histogram"
}
if (missing(ylab)) ylab <- "count"
} else {
if (missing(x)) {
aesthetics$x <- bquote(seq_along(.(y)), aesthetics)
}
geom[geom == "auto"] <- "point"
}
}
p <- ggplot(data, aesthetics, environment = env)
if (is.null(facets)) {
p <- p + facet_null()
} else if (is.formula(facets) && length(facets) == 2) {
p <- p + facet_wrap(facets)
} else {
p <- p + facet_grid(facets = deparse(facets), margins = margins)
}
if (!is.null(main)) p <- p + ggtitle(main)
# Add geoms/statistics
for (g in geom) {
# Arguments are unevaluated because some are aesthetics. Need to evaluate
# params - can't do in correct env because that's lost (no lazyeval)
# so do the best we can by evaluating in parent frame.
params <- arguments[setdiff(names(arguments), c(aes_names, argnames))]
params <- lapply(params, eval, parent.frame())
p <- p + do.call(paste0("geom_", g), params)
}
logv <- function(var) var %in% strsplit(log, "")[[1]]
if (logv("x")) p <- p + scale_x_log10()
if (logv("y")) p <- p + scale_y_log10()
if (!is.na(asp)) p <- p + theme(aspect.ratio = asp)
if (!missing(xlab)) p <- p + xlab(xlab)
if (!missing(ylab)) p <- p + ylab(ylab)
if (!missing(xlim)) p <- p + xlim(xlim)
if (!missing(ylim)) p <- p + ylim(ylim)
p
}
qplot1(cty, hwy, data = mpg)
env <- parent.frame()
env
argnames <- names(as.list(match.call(expand.dots = FALSE)[-1]))
load("~/GitHub/eledata-data-analysis/R Data Mining/Data Mining Projects/time-series-analysis-and-order-prediction-r/orderts.RData")
head(orderts)
qplot(week, orders, dasta = orderts, colour = as.factor(year),geom = "line")
library(ggplot2)
qplot(week, orders, dasta = orderts, colour = as.factor(year),geom = "line")
library(ggplot2)
load("~/GitHub/eledata-data-analysis/R Data Mining/Data Mining Projects/time-series-analysis-and-order-prediction-r/orderts.RData")
qplot(week, orders, dasta = orderts, colour = as.factor(year),geom = "line")
library("rattle")
rattle()
library(‘ggplot2’)
qplot(week, orders, data = orderts, colour = as.factor(year), geom = "line")
library(ggplot2)
qplot(week, orders, data = orderts, colour = as.factor(year), geom = "line")
orderts2 <- cbind(orderts[-13,], weekinq=c(1:117))
prev <- orderts2[1,]
runvar <- 1
for(i in 2:nrow(orderts2)){
current <- orderts2[i,]
orderts2[i,"weekinq"] <- ifelse(prev$quarter == current$quarter, runvar+1, 1)
runvar <- ifelse(prev$quarter == current$quarter, runvar+1, 1)
prev <- current
}
rm(prev, current, runvar, i)
qplot(weekinq, orders, data = orderts2, colour = as.factor(year), geom = "line") +
facet_wrap(~quarter)
orderts2
head(orderts2 )
head(orderts)
orderts2 <- cbind(orderts[-13,], weekinq=c(1:117))
head(orderts2 )
head(orderts2)
orderts[-13,]
head(orderts[-13,])
head(orderts)
head(orderts2[1,])
head(orderts[-1,])
head(orderts[-2,])
head(orderts[-13,])
orderts[-13,]
f <- data.frame(coef = fft(orderts2[1:104, "orders"]), freqindex = c(1:104))
qplot(freqindex, Mod(coef), data = f2[2:53,], geom = "line")
f <- data.frame(coef = fft(orderts2[1:104, "orders"]), freqindex = c(1:104))
qplot(freqindex, Mod(coef), data = f[2:53,], geom = "line")
conc <- c(2.856829, 5.005303, 7.519473, 22.101664, 27.769976, 39.198025, 45.483269, 203.784238)
rate <- c(14.58342, 24.74123, 31.34551, 72.96985, 77.50099, 96.08794, 96.96624, 108.88374)
L.minor <- data.frame(conc, rate)
L.minor.m1 <- nls(rate ~ Vm * conc/(K + conc), data = L.minor, #采用M-M动力学方程
start = list(K = 20, Vm = 120), #初始值设置为K=20，Vm=120
trace = TRUE) #占线拟合过程
#确定x轴范围并构建数据集
min <- range(L.minor$conc)[1]
max <- range(L.minor$conc)[2]
line.data <- data.frame(conc = seq(min, max, length.out = 1000))
#用模型预测数据构建数据集
line.data$p.predict <- predict(L.minor.m1, newdata = line.data)
require(ggplot2)
M_Mfunction <- ggplot() +
geom_point(aes(x = conc, y = rate), data = L.minor,
alpha = 0.5, size = 5, color = "red") +
geom_line(aes(x = conc, y = p.predict), data = line.data,
size = 1, color = "blue") +
scale_x_continuous(
name = expression(Substrate ~~ concentration(mmol ~~ m^3)),#采用expression来表示数学公式
breaks = seq(0, 200, by = 25)) +
scale_y_continuous(
name = "Uptake rate (weight/h)",
breaks = seq(0, 120, by = 10)) +
geom_text(aes(x = 100, y = 60),
label = "bolditalic(f(list(x, (list(K, V[m])))) == frac(V[m]%.%x, K+x))",
#注意 geom_text中如果用expression()来进行表达，必须开启parse = TRUE
#同时以字符串""的形式表示，不能使用expression
parse = TRUE,
size = 5, family = "times"
) +
theme_bw() +
theme(
axis.title.x=element_text(size=16),
axis.title.y=element_text(size=16),
axis.text.x=element_text(size=12),
axis.text.y=element_text(size=12))
conc <- c(2.856829, 5.005303, 7.519473, 22.101664, 27.769976, 39.198025, 45.483269, 203.784238)
rate <- c(14.58342, 24.74123, 31.34551, 72.96985, 77.50099, 96.08794, 96.96624, 108.88374)
L.minor <- data.frame(conc, rate)
L.minor.m1 <- nls(rate ~ Vm * conc/(K + conc), data = L.minor, #采用M-M动力学方程
start = list(K = 20, Vm = 120), #初始值设置为K=20，Vm=120
trace = TRUE) #占线拟合过程
#确定x轴范围并构建数据集
min <- range(L.minor$conc)[1]
max <- range(L.minor$conc)[2]
line.data <- data.frame(conc = seq(min, max, length.out = 1000))
#用模型预测数据构建数据集
line.data$p.predict <- predict(L.minor.m1, newdata = line.data)
M_Mfunction
min <- range(L.minor$conc)[1]
max <- range(L.minor$conc)[2]
(r.x <- range(stats::rnorm(100)))
diff(r.x) # the SAMPLE range
x <- c(NA, 1:3, -1:1/0); x
range(x)
range(x, na.rm = TRUE)
range(x, finite = TRUE)
line.data <- data.frame(conc = seq(min, max, length.out = 1000))
line.data
head(line.data)
line.data$p.predict <- predict(L.minor.m1, newdata = line.data)
head(line.data)
require(ggplot2)
M_Mfunction <- ggplot() +
geom_point(aes(x = conc, y = rate), data = L.minor,
alpha = 0.5, size = 5, color = "red") +
geom_line(aes(x = conc, y = p.predict), data = line.data,
size = 1, color = "blue")
M_Mfunction
require(ggplot2)
M_Mfunction <- ggplot() +
geom_point(aes(x = conc, y = rate), data = L.minor,
alpha = 0.5, size = 5, color = "red") +
geom_line(aes(x = conc, y = p.predict), data = line.data,
size = 1, color = "blue") +
theme_bw()
M_Mfunction
require(ggplot2)
M_Mfunction <- ggplot() +
geom_point(aes(x = conc, y = rate), data = L.minor,
alpha = 0.5, size = 5, color = "red") +
geom_line(aes(x = conc, y = p.predict), data = line.data,
size = 1, color = "blue") +
scale_x_continuous(
name = expression(Substrate ~~ concentration(mmol ~~ m^3)),#采用expression来表示数学公式
breaks = seq(0, 200, by = 25)) +
scale_y_continuous(
name = "Uptake rate (weight/h)",
breaks = seq(0, 120, by = 10))
M_Mfunction
require(showtext)
require(ggplot2)
require(Cairo)
font.add("BlackoakStd", "C://Windows//Fonts//BlackoakStd.otf")
font.add("BrushScriptStd", "C://Windows//Fonts//BrushScriptStd.otf")
font.add("times", "C://Windows//Fonts//times.ttf")
font.add("STHUPO", "C://Windows//Fonts//STHUPO.ttf")
CairoPDF("showtext_output", 8, 8)
showtext.begin()
ggplot() +
geom_text(aes(x = 16, y = 16.25), label = "Blackoak Std", size = 8,
family = "BlackoakStd") +
geom_text(aes(x = 16, y = 16), label ="Brush Script Std", size = 16,
family = "BrushScriptStd") +
geom_text(aes(x = 16, y = 15.75), label = "Times New Roman", size = 16,
family = "times") +
geom_text(aes(x = 16, y = 15.50), label = "华文琥珀", size = 16,
family = "STHUPO") +
ylim(c(15.25, 16.50)) +
labs(x = "", y = "") +
theme_bw() #在用RStudio输出
